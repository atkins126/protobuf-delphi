syntax = "proto3";

// Examples of use pascal reserved names
message PascalReserved {
  string normal = 1;
  string default = 2;
  string function = 3;
  string var = 4;
}

message OptionalFields {
  message Nested {
    int32 an_int = 1;
  }
  string a_string = 1;
  bool a_bool = 2;
  Nested a_nested_message = 3;
  repeated Nested a_repeated_message = 4;
  repeated string a_repeated_string = 5;
}

message HasReservedFields {
  string str1 = 1;
  string str2 = 2;
  string str3 = 3;
  reserved 3, 15, 9 to 11;
  reserved "foo", "bar";
}

message Complex {
  message Nested {
    required int32 an_int = 2;
  }
  required string a_string = 1;
  bool an_out_of_order_bool = 9;
  Nested a_nested_message = 4;
  repeated Nested a_repeated_message = 5;
  repeated string a_repeated_string = 7;
  double a_floating_point_field = 10;
}

message OuterMessage {
  // Make sure this doesn't conflict with the other Complex message.
  message Complex {
    optional int32 inner_complex_field = 1;
  }
}

message DefaultValues {
  enum Enum {
    E1 = 13;
    E2 = 77;
  }
  optional string string_field = 1 [default = "default<>\'\"abc"];
  optional bool bool_field = 2 [default = true];
  optional int64 int_field = 3 [default = 11];
  optional Enum enum_field = 4 [default = E1];
  optional string empty_field = 6 [default = ""];
  optional bytes bytes_field = 8
      [default = "moo"];  // Base64 encoding is "bW9v"
}

message FloatingPointFields {
  optional float optional_float_field = 1;
  required float required_float_field = 2;
  repeated float repeated_float_field = 3;
  optional float default_float_field = 4 [default = 2.0];
  optional double optional_double_field = 5;
  required double required_double_field = 6;
  repeated double repeated_double_field = 7;
  optional double default_double_field = 8 [default = 2.0];
}

message BooleanFields {
  optional bool optional_boolean_field = 1;
  required bool required_boolean_field = 2;
  repeated bool repeated_boolean_field = 3;
  optional bool default_boolean_field = 4 [default = true];
}

message TestReservedNames {
  optional int32 extension = 1;
  reserved 10 to max;
  optional int32 foo = 10;
}

message Deeply {
  message Nested {
    message Message {
      optional int32 count = 1;
    }
  }
}

enum TestAllowAliasEnum {
  option allow_alias = true;

  TEST_ALLOW_ALIAS_DEFAULT = 0;
  VALUE1 = 1;
  value1 = 1;
}